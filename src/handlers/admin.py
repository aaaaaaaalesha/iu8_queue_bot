import datetime as dt

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup

from src.db.sqlite_db import (
    sql_get_queue_list,
    sql_add_queue,
    sql_add_admin,
    sql_delete_queue,
    sql_get_managed_chats,
    sql_get_chat_title,
)
from src.keyboards.client_kb import (
    PLAN_QUEUE_TEXT,
    DELETE_QUEUE_TEXT,
    PLANNED_QUEUES_TEXT,
)
from src.services.admin_service import (
    EarlierException,
    parse_to_datetime,
    wait_for_queue_launch,
)
from src.create_bot import dp, bot
from src.keyboards import admin_kb, calendar_kb


class FSMPlanning(StatesGroup):
    """–ö–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π."""
    choose_chat = State()
    queue_name = State()
    start_date = State()
    start_datetime = State()


class FSMDeletion(StatesGroup):
    """–ö–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    queue_choice = State()


async def cancel_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-handler –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è.
    –ü—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –∫–æ–Ω–µ—á–Ω–æ–º –∞–≤—Ç–æ–º–∞—Ç–µ, –ø–æ–ø—É—Ç–Ω–æ —É–¥–∞–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await callback.message.delete()
    await callback.answer('üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()


async def queues_list_handler(msg: types.Message) -> tuple:
    """
    –§—É–Ω–∫—Ü–∏—è-handler –≤—ã–¥–∞—á–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.
    """
    found_queues = sql_get_queue_list(msg.from_user.id)
    if not found_queues:
        await bot.send_message(
            msg.from_user.id,
            "üôä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.\n–ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–¥–Ω—É?",
            reply_markup=admin_kb.inl_plan_kb,
        )

        return found_queues, None

    out_str = '\n'.join([
        f"üìå¬´{queue_name}¬ª –≤ —á–∞—Ç–µ ¬´{chat_title}¬ª "
        f"{dt.datetime.strptime(time, '%Y-%m-%d %H:%M:%S%z').strftime('%d.%m.%Y –≤ %H:%M')}"
        for _, queue_name, time, _, chat_title in found_queues
    ])

    planned_msg = await bot.send_message(
        msg.from_user.id,
        f"‚§µÔ∏è –í–æ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –æ—á–µ—Ä–µ–¥–∏:\n{out_str}",
    )

    return found_queues, planned_msg


""" Planning queue zone"""


async def queue_plan_handler(msg: types.Message) -> None:
    await __start_planning(msg)


async def queue_plan_inline_handler(callback: types.CallbackQuery) -> None:
    await __start_planning(callback)


async def __start_planning(action: types.Message | types.CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π.
    –ï—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤–∞–º–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã, –æ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º
    –≤—ã–±—Ä–∞—Ç—å, –≤ –∫–∞–∫–æ–º –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å.
    """
    await action.answer('üìë –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –æ—á–µ—Ä–µ–¥–∏...')
    managed_chats = sql_get_managed_chats(action.from_user.id)

    if not managed_chats:
        await bot.send_message(
            action.from_user.id,
            "üôä –í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –Ω–∏ –≤ –æ–¥–∏–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.\n"
            "–Ø –º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ç–∞–º üíÅ‚Äç‚ôÇÔ∏è",
        )
        return

    await FSMPlanning.choose_chat.set()
    await sql_add_admin(action.from_user.id, action.from_user.username)

    inl_kb_chat_choices = InlineKeyboardMarkup()
    for chat_id, chat_title in managed_chats:
        inl_kb_chat_choices.add(
            types.InlineKeyboardButton(
                text=chat_title,
                callback_data=f"choose_chat_{chat_id}",
            )
        )
    inl_kb_chat_choices.add(admin_kb.cancel_button)

    await bot.send_message(
        action.from_user.id,
        "‚§µÔ∏è–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞:",
        reply_markup=inl_kb_chat_choices,
    )


async def queue_set_chat_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-handler —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ,
    –∏–Ω–∞—á–µ –æ—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.
    """
    async with state.proxy() as data:
        chat_id = int(callback.data[len("choose_chat_"):])
        chat_title = sql_get_chat_title(chat_id)
        if not chat_title:
            await callback.answer(
                "–ö–∞–∂–µ—Ç—Å—è, –±–æ—Ç–∞ —É–∂–µ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            )
            await cancel_handler(callback, state)
            return

        data['chat_id'] = chat_id
        data['chat_title'] = chat_title[0]

    await FSMPlanning.next()
    await bot.send_message(
        callback.from_user.id,
        "üìù –ó–∞–¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏",
        reply_markup=admin_kb.inl_cancel_kb,
    )


async def set_queue_name_handler(msg: types.Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-handler —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –æ—á–µ—Ä–µ–¥–∏. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –æ—á–µ—Ä–µ–¥–∏,
    –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
    """
    if not msg.text or msg.text in (PLAN_QUEUE_TEXT, DELETE_QUEUE_TEXT, PLANNED_QUEUES_TEXT):
        await bot.send_message(
            msg.from_user.id,
            '‚ùå –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏! –ó–∞–¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏',
            reply_markup=admin_kb.inl_cancel_kb,
        )
        return

    async with state.proxy() as data:
        data['queue_name'] = msg.text

    await FSMPlanning.next()
    await bot.send_message(
        msg.from_user.id,
        'üìÖ –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –¥–∞—Ç—É –∑–∞–ø—É—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:',
        reply_markup=await calendar_kb.Calendar().start_calendar(),
    )


async def set_date_handler(
        callback: types.CallbackQuery,
        callback_data: dict,
        state: FSMContext,
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-handler —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–∞—Ç—ã.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ –æ—á–µ—Ä–µ–¥–∏.
    """
    selected, date = await calendar_kb.Calendar().process_selection(
        query=callback,
        data=callback_data,
    )
    if selected:
        async with state.proxy() as data:
            data["selected_date"] = date

        await FSMPlanning.next()
        await bot.send_message(
            callback.from_user.id,
            'üïì –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (ex. "15:40")',
            reply_markup=admin_kb.inl_cancel_kb,
        )


async def set_datetime_handler(msg: types.Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-handler —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.
    –í—ã–¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ.
    """
    async with state.proxy() as data:
        try:
            start_datetime = parse_to_datetime(data["selected_date"], msg.text)
        except ValueError:
            await bot.send_message(
                msg.from_user.id,
                '‚ùå –í—Ä–µ–º—è –∑–∞–¥–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞:\n- "—á—á:–º–º" (ex. "15:40")',
                reply_markup=admin_kb.inl_cancel_kb
            )
            return
        except EarlierException as e:
            await bot.send_message(
                msg.from_user.id,
                text=str(e),
                reply_markup=admin_kb.inl_cancel_kb,
            )
            return

        data['start_datetime'] = start_datetime

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥.
    queue_name = data['queue_name']
    chat_id = data['chat_id']
    chat_title = data['chat_title']
    queue_id = await sql_add_queue(
        msg.from_user.id,
        queue_name,
        start_datetime,
        chat_id,
        chat_title,
    )

    await bot.send_message(
        msg.from_user.id,
        f"‚úÖ –û—á–µ—Ä–µ–¥—å ¬´{queue_name}¬ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ ¬´{chat_title}¬ª!\n"
        f"–ù–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏: {start_datetime.strftime('%d.%m.%Y –≤ %H:%M')}",
    )

    await bot.send_message(
        chat_id,
        f"‚úÖ –û—á–µ—Ä–µ–¥—å ¬´{queue_name}¬ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n"
        f"–ù–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏: {start_datetime.strftime('%d.%m.%Y –≤ %H:%M')}",
    )

    await state.finish()
    await wait_for_queue_launch(
        start_datetime,
        chat_id,
        queue_id[0],
    )


""" Deleting queue zone"""


async def choose_queue_to_delete_handler(msg: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è-handler –≤—ã–±–æ—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    planned_queues, del_msg = await queues_list_handler(msg)

    if not planned_queues or del_msg is None:
        return

    inl_kb_choices = InlineKeyboardMarkup()
    for queue_id, queue_name, _, _, _ in planned_queues:
        inl_kb_choices.add(types.InlineKeyboardButton(
            text=queue_name, callback_data=f"delete_queue_{queue_id}")
        )
    inl_kb_choices.add(admin_kb.cancel_button)

    global messages_tuple
    messages_tuple = (
        del_msg,
        await bot.send_message(
            msg.from_user.id,
            'üóë –í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:',
            reply_markup=inl_kb_choices,
        )
    )

    await FSMDeletion.queue_choice.set()


@dp.callback_query_handler(Text(startswith='delete_queue_'), state=FSMDeletion.queue_choice)
async def delete_queue_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è-handler —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.
    """
    chat_id, msg_id = await sql_delete_queue(int(callback.data[len("delete_queue_"):]))
    try:
        await bot.delete_message(chat_id, msg_id)
        await messages_tuple[0].delete()
        await messages_tuple[1].delete()
    except TypeError:
        pass
    finally:
        await callback.answer('üí• –û—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∞')
        await state.finish()


def register_admin_handlers(dp_: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö handler-—Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    dp_.register_callback_query_handler(
        cancel_handler, text="cancel_call", state="*"
    )
    dp_.register_message_handler(
        queues_list_handler, Text(equals='üóí –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π'), state=None
    )
    dp_.register_message_handler(
        queues_list_handler, commands="queues_list", state=None
    )
    # Plan queue.
    dp_.register_message_handler(
        queue_plan_handler, Text(equals='üìå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å'), state=None
    )
    dp_.register_message_handler(
        queue_plan_handler, commands='plan_queue', state=None
    )
    dp_.register_callback_query_handler(
        queue_plan_inline_handler, text="plan_queue", state=None
    )
    dp_.register_callback_query_handler(
        queue_set_chat_handler, Text(startswith='choose_chat_'), state=FSMPlanning.choose_chat
    )
    dp_.register_message_handler(
        set_queue_name_handler, content_types='text', state=FSMPlanning.queue_name
    )
    dp_.register_callback_query_handler(
        set_date_handler, calendar_kb.calendar_callback.filter(), state=FSMPlanning.start_date
    )
    dp_.register_message_handler(
        set_datetime_handler, content_types='text', state=FSMPlanning.start_datetime
    )
    # Delete queue.
    dp_.register_message_handler(
        choose_queue_to_delete_handler, Text(equals='üóë –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å'), state=None
    )
    dp_.register_message_handler(
        choose_queue_to_delete_handler, Text(equals='üóë –£–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å'), commands='delete_queue', state=None
    )
    dp_.register_callback_query_handler(
        delete_queue_handler, Text(startswith='delete_queue_'), state=FSMDeletion.queue_choice
    )
