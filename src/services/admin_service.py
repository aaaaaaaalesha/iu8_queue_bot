import datetime as dt
from pytz import timezone
import asyncio
from aiogram.utils.exceptions import BadRequest

from src.loader import bot, db
from src.keyboards import client_kb


class EarlierException(Exception):
    pass


async def wait_for_queue_launch(start_dt: dt.datetime, chat_id: int, queue_id: int) -> None:
    """
    –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.
    """
    await asyncio.sleep(
        (start_dt - dt.datetime.now(timezone('Europe/Moscow'))).seconds
    )

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.
    queue_data = await db.get_queue_from_list(queue_id)
    if not queue_data:
        await bot.send_message(
            chat_id=chat_id,
            text=f"üóë –ö–∞–∂–µ—Ç—Å—è, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ—á–µ—Ä–µ–¥—å, —É–¥–∞–ª–∏–ª–∏ :(",
        )
        return

    msg = await bot.send_message(
        chat_id,
        f"üÜï üÖ†üÖ§üÖîüÖ§üÖî üÜï\n –û—á–µ—Ä–µ–¥—å ¬´{queue_data[2]}¬ª –∑–∞–ø—É—â–µ–Ω–∞!\n\n",
        reply_markup=client_kb.queue_inl_kb
    )
    try:
        await msg.pin(disable_notification=False)
    except BadRequest:
        pass

    await db.post_queue_msg_id(queue_id, msg.message_id)


def parse_to_datetime(date: dt.datetime, input_time: str) -> dt.datetime:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ.
    """
    dt_now = dt.datetime.now(timezone('Europe/Moscow'))
    h, m = tuple(map(int, input_time.split(':')))

    resulted_date = date
    if resulted_date.replace(hour=h, minute=m, second=0) < dt_now:
        raise EarlierException(
            f"‚ùå –í–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ!\n–°–µ–π—á–∞—Å {dt_now.strftime('%H:%M')}"
        )

    return date.replace(hour=h, minute=m, second=0, tzinfo=dt_now.tzinfo)
